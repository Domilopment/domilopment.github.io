{"version":3,"sources":["Header.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","props","state","menuOpen","openMenu","bind","closeMenu","this","setState","isOpen","closeCallback","style","styles","menuul","menuli","href","menua","headerContainer","header","menuClicked","headerLeft","width","height","strokeWidth","rotate","color","borderRadius","animationDuration","headerCenter","aria-level","title","Component","minWidth","position","borderBottomWidth","StyleSheet","hairlineWidth","borderBottomColor","background","top","zIndex","padding","paddingVertical","alignItems","flexDirection","minHeight","display","order","flex","headerRight","paddingRight","fontSize","fontWeight","textAlign","paddingLeft","listStyle","borderStyle","borderWidth","textDecoration","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAIMA,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,UAAU,GAEd,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBANF,E,wEAUfE,KAAKC,UAAS,SAACN,EAAOD,GAAR,MAAmB,CAC7BE,UAAU,Q,kCAKdI,KAAKC,UAAS,SAACN,EAAOD,GAAR,MAAmB,CAC7BE,UAAU,Q,+BAKd,OAAO,oCACH,kBAAC,IAAD,CACIM,OAAQF,KAAKL,MAAMC,SACnBO,cAAeH,KAAKD,WAEpB,wBAAIK,MAAOC,EAAOC,QACd,wBAAIF,MAAOC,EAAOE,QACd,uBACAC,KAAK,qCACLJ,MAAOC,EAAOI,OAFd,cAMJ,wBAAIL,MAAOC,EAAOE,QACd,uBACAC,KAAK,gCACLJ,MAAOC,EAAOI,OAFd,aAQZ,yBAAKL,MAAOC,EAAOK,iBACf,yBAAKN,MAAOC,EAAOM,QACf,kBAAC,IAAD,CACIT,OAAQF,KAAKL,MAAMC,SACnBgB,YAAaZ,KAAKH,SAClBO,MAAOC,EAAOQ,WACdC,MAAO,GACPC,OAAQ,GACRC,YAAa,EACbC,OAAQ,EACRC,MAAM,QACNC,aAAc,EACdC,kBAAmB,KAEvB,yBAAKhB,MAAOC,EAAOgB,cACf,wBAAIC,aAAW,IAAIlB,MAAOC,EAAOkB,OAAQ,uB,GA5D5CC,aAoEfnB,EAAS,CACXK,gBAAiB,CACbe,SAAU,OACVC,SAAU,QACVC,kBAAmBC,WAAWC,cAC9BC,kBAAmB,WACnBC,WAAY,kDACZC,IAAK,EACLC,OAAQ,GAEZtB,OAAQ,CACJuB,QAAS,GACTC,gBAAiB,EACjBC,WAAY,SACZC,cAAe,MACfC,UAAW,GACXC,QAAS,cACTzB,MAAO,QAEXD,WAAY,CACR2B,MAAO,EACP1B,MAAO,IAEXO,aAAc,CACVmB,MAAO,EACPC,KAAM,GAEVC,YAAa,CACTF,MAAO,EACP1B,MAAO,GACP6B,aAAc,IAElBpB,MAAO,CACHqB,SAAU,GACVC,WAAY,MACZC,UAAW,SACX5B,MAAO,SAEXZ,OAAQ,CACJyC,YAAa,GAEjBxC,OAAQ,CACJyC,UAAW,OACX9B,MAAO,OACP+B,YAAa,QACbC,YAAa,GAEjBzC,MAAO,CACH8B,QAAS,QACTL,QAAS,GACTa,YAAa,GACbI,eAAgB,OAChBP,SAAU,GACVC,WAAY,OACZ3B,MAAO,yDAIAzB,IC3GA2D,E,YAlBX,WAAY1D,GAAQ,qEACVA,I,sEAIN,OACI,yBAAK2D,UAAU,OACX,4BAAQA,UAAU,cACd,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,WACX,uD,GAZF7B,aCQE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.751f6ccb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport CheeseburgerMenu from 'cheeseburger-menu';\r\nimport HamburgerMenu from 'react-hamburger-menu';\r\n\r\nclass Header extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            menuOpen: false,\r\n        }\r\n        this.openMenu = this.openMenu.bind(this);\r\n        this.closeMenu = this.closeMenu.bind(this);\r\n    }\r\n\r\n    openMenu() {\r\n        this.setState((state, props) => ({\r\n            menuOpen: true\r\n        }));\r\n    }\r\n\r\n    closeMenu() {\r\n        this.setState((state, props) => ({\r\n            menuOpen: false\r\n        }));\r\n    }\r\n\r\n    render(){\r\n        return(<>\r\n            <CheeseburgerMenu\r\n                isOpen={this.state.menuOpen}\r\n                closeCallback={this.closeMenu}\r\n            >\r\n                <ul style={styles.menuul}>\r\n                    <li style={styles.menuli} >\r\n                        <a \r\n                        href=\"https://www.github.com/domilopment\" \r\n                        style={styles.menua} >\r\n                            My GitHub\r\n                        </a>\r\n                    </li>\r\n                    <li style={styles.menuli} >\r\n                        <a \r\n                        href=\"https://www.github.com/sadoke\" \r\n                        style={styles.menua} >\r\n                            SaDoKe\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </CheeseburgerMenu>\r\n            <div style={styles.headerContainer}>\r\n                <div style={styles.header}>\r\n                    <HamburgerMenu\r\n                        isOpen={this.state.menuOpen}\r\n                        menuClicked={this.openMenu}\r\n                        style={styles.headerLeft}\r\n                        width={32}\r\n                        height={24}\r\n                        strokeWidth={3}\r\n                        rotate={0}\r\n                        color='white'\r\n                        borderRadius={0}\r\n                        animationDuration={0.5}\r\n                    />\r\n                    <div style={styles.headerCenter}>\r\n                        <h1 aria-level=\"3\" style={styles.title}>{'Domilopment'}</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>);\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    headerContainer: {\r\n        minWidth: '100%',\r\n        position: 'fixed',  \r\n        borderBottomWidth: StyleSheet.hairlineWidth,\r\n        borderBottomColor: 'darkblue',\r\n        background: 'linear-gradient(to right, darkblue, darkorchid)',\r\n        top: 0,\r\n        zIndex: 1,\r\n    },\r\n    header: {\r\n        padding: 10,\r\n        paddingVertical: 5,\r\n        alignItems: 'center',\r\n        flexDirection: 'row',\r\n        minHeight: 50,\r\n        display: 'inline-flex',\r\n        width: '100%'\r\n    },\r\n    headerLeft: {\r\n        order: 1,\r\n        width: 80\r\n    },\r\n    headerCenter: {\r\n        order: 2,\r\n        flex: 1\r\n    },\r\n    headerRight: {\r\n        order: 3,\r\n        width: 50,\r\n        paddingRight: 20,\r\n    },\r\n    title: {\r\n        fontSize: 19,\r\n        fontWeight: '600',\r\n        textAlign: 'center',\r\n        color: 'white'\r\n    },\r\n    menuul: {\r\n        paddingLeft: 0,\r\n    },\r\n    menuli: {\r\n        listStyle: 'none',\r\n        color: 'gray',\r\n        borderStyle: 'solid',\r\n        borderWidth: 1,\r\n    },\r\n    menua: {\r\n        display: 'block',\r\n        padding: 20,\r\n        paddingLeft: 40,\r\n        textDecoration: 'none',\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        color: 'linear-gradient(to right, darkturquoise, darkorchid)',\r\n    },\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './Header'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <Header />\r\n                </header>\r\n                <div className='Content'>\r\n                    <h1> Coming Soon !!! </h1>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}